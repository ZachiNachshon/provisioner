name: 'Create a GitHub release version'
description: 'Releasing to GitHub a previously PyPi published projects'

inputs:
  GITHUB_TOKEN:
    type: string
    description: 'GitHub API token'
    required: true
  project_to_release:
    type: choice
    description: 'Select project to add as GitHub release'
    options: 
      - 'provisioner'
      - 'provisioner_examples_plugin'
      - 'provisioner_installers_plugin'
      - 'provisioner_single_board_plugin'
    required: true

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print GitHub release arguments"
        echo "project_to_release: ${{ inputs.project_to_release }}"
        echo "::endgroup::"
      shell: bash

    # Discard any potential changes to the git index which might
    # contain dependencies section in the pyproject.toml file
    # and other non version-bump from previous steps/actions
    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Create a GitHub release
      run: |
        echo "::group::Creating a GitHub release"
        project_to_release=${{ inputs.project_to_release }}
        publisher_script_path=""

        if [ ${project_to_release} == "provisioner"]; then
          publisher_script_path="../scripts/publish_to_pypi.sh"
          cd ${project_to_release}
        else
          publisher_script_path="../../scripts/publish_to_pypi.sh"
          cd plugins/${project_to_release}
        fi

        ./{publisher_script_path} publish --build-type wheel --release-type github -y

        if [ ${project_to_release} == "provisioner"]; then
          cd ..
        else
          cd ../..
        fi
        echo "::endgroup::" 
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      shell: bash
