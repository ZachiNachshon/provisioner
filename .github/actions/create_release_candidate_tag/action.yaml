name: 'Create Release Candidate Version'
description: 'Generate RC version and prepare artifacts for GitHub pre-release'

inputs:
  GITHUB_TOKEN:
    type: string
    description: 'GitHub API token'
    required: true
  project_to_release:
    type: choice
    description: 'Select project to create RC for'
    options: 
      - 'provisioner'
    required: true

outputs:
  rc_version:
    description: 'Generated RC version'
    value: ${{ steps.generate_rc.outputs.rc_version }}
  project_name:
    description: 'Project name being released'
    value: ${{ steps.generate_rc.outputs.project_name }}

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print RC creation arguments"
        echo "project_to_release: ${{ inputs.project_to_release }}"
        echo "::endgroup::"
      shell: bash

    # Discard any potential changes to the git index which might
    # contain dependencies section in the pyproject.toml file
    # and other non version-bump from previous steps/actions
    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Map GitHub token
      run: |
        # Used by GitHub CLI client
        echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
      shell: bash

    - name: Generate RC Version
      id: generate_rc
      run: |
        echo "::group::Generating RC version"
        python scripts/generate_rc_version.py ${{ inputs.project_to_release }}
        echo "::endgroup::" 
      shell: bash

    - name: Create Git Tag for RC
      run: |
        rc_version="${{ steps.generate_rc.outputs.rc_version }}"
        project_name="${{ steps.generate_rc.outputs.project_name }}"
        
        echo "Creating git tag for RC version: v${rc_version}"
        
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
        
        git tag "v${rc_version}" -m "Release Candidate v${rc_version} for ${project_name}"
        git push origin "v${rc_version}"
      shell: bash 