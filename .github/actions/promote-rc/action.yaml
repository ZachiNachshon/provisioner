name: 'Promote Release Candidate'
description: 'Create RC version, build wheels, create git tag, and upload GitHub pre-release'

inputs:
  GITHUB_TOKEN:
    type: string
    description: 'GitHub API token'
    required: true
  project_to_release:
    type: choice
    description: 'Select project to create RC for'
    options: 
      - 'provisioner'
    required: true

outputs:
  package_version:
    description: 'Final package version for build artifacts'
    value: ${{ steps.generate_rc.outputs.package_version }}
  rc_tag:
    description: 'RC tag for git tagging'
    value: ${{ steps.generate_rc.outputs.rc_tag }}

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print RC promotion arguments"
        echo "project_to_release: ${{ inputs.project_to_release }}"
        echo "::endgroup::"
      shell: bash   

    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Map GitHub token
      run: |
        # Used by GitHub CLI client and package_deployer.sh script
        echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
      shell: bash

    - name: Generate Release Versions
      id: generate_rc
      run: |
        echo "::group::Calculating release versions (build-once approach)"
        python scripts/github_actions/version_manager.py generate ${{ inputs.project_to_release }}
        echo "::endgroup::" 
      shell: bash

    - name: Create Git Tag
      run: |
        package_version="${{ steps.generate_rc.outputs.package_version }}"
        rc_tag="${{ steps.generate_rc.outputs.rc_tag }}"
        project_to_release="${{ inputs.project_to_release }}"
        
        echo "Creating git tag: v${rc_tag} (packages built with final version ${package_version})"
        
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
        
        git tag "v${rc_tag}" -m "Release Candidate v${rc_tag} for ${project_to_release} (package version: ${package_version})"
        git push origin "v${rc_tag}"
      shell: bash

    - name: Build Release Assets
      run: |
        echo "::group::Building wheel packages and compressing as tar.gz for release assets"
        project_to_release="${{ inputs.project_to_release }}"
        package_version="${{ steps.generate_rc.outputs.package_version }}"
        rc_tag="${{ steps.generate_rc.outputs.rc_tag }}"
        
        echo "Building wheel packages for ${project_to_release} with final version ${package_version}"
        echo "Git tag will be v${rc_tag}, packages will be compressed for release assets"
        
        # Build main project wheel with final version and compression
        echo "Building ${project_to_release} wheel package with final version ${package_version}..."
        scripts/github_actions/package_deployer.sh build \
          --build-type wheel \
          --version ${package_version} \
          --compress tar.gz \
          --project-path ${project_to_release} \
          -y
        
        # Build provisioner_shared wheel (dependency) with final version and compression
        echo "Building provisioner_shared wheel package with final version ${package_version}..."
        scripts/github_actions/package_deployer.sh build \
          --build-type wheel \
          --version ${package_version} \
          --compress tar.gz \
          --project-path provisioner_shared \
          -y
        
        # Create assets directory and copy renamed packages
        mkdir -p release-assets
        
        # Copy compressed wheel assets
        if [ -d "${project_to_release}/dist" ]; then
          cp ${project_to_release}/dist/*-v${package_version}.tar.gz release-assets/ 2>/dev/null || true
          echo "Copied ${project_to_release} compressed wheel assets"
        fi
        
        if [ -d "provisioner_shared/dist" ]; then
          cp provisioner_shared/dist/*-v${package_version}.tar.gz release-assets/ 2>/dev/null || true
          echo "Copied provisioner_shared compressed wheel assets"
        fi
        
        echo "Built release assets:"
        ls -la release-assets/
        
        echo "::endgroup::"
      shell: bash

    - name: Create GitHub Pre-Release
      run: |
        echo "::group::Creating GitHub pre-release with minimal title"
        rc_tag="${{ steps.generate_rc.outputs.rc_tag }}"
        
        echo "Creating GitHub pre-release for tag v${rc_tag}"
        echo "Pre-release will have minimal title with no body content"
        
        # Use the enhanced publish script to create pre-release with minimal title and no notes
        scripts/github_actions/package_deployer.sh prerelease \
          --release-tag "v${rc_tag}" \
          --release-title "v${rc_tag}" \
          --assets-dir "release-assets" \
          --target-branch "master" \
          -y
        
        echo "Successfully created pre-release v${rc_tag} with minimal title"
        echo "::endgroup::"
      shell: bash 