name: 'Promote Release Candidate to PyPI'
description: 'Convert RC version to stable version and publish to PyPI'

inputs:
  PYPI_API_TOKEN_PROVISIONER_RUNTIME:
    type: string
    description: 'PyPi provisioner runtime API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_SHARED:
    type: string
    description: 'PyPi provisioner shared API token'
    required: false
  GITHUB_TOKEN:
    type: string
    description: 'GitHub API token'
    required: true
  project_name:
    type: string
    description: 'Project name to promote'
    required: true
  rc_version:
    type: string
    description: 'RC version to promote (e.g., 1.2.3-RC.1). Leave empty to auto-select latest RC.'
    required: false

outputs:
  stable_version:
    description: 'Generated stable version'
    value: ${{ steps.promote.outputs.stable_version }}

runs:
  using: 'composite'  
  steps:
    - name: Determine RC Version
      id: determine_rc
      run: |
        echo "::group::Determining RC version to promote"
        project_name="${{ inputs.project_name }}"
        input_rc_version="${{ inputs.rc_version }}"
        
        if [ -n "$input_rc_version" ]; then
          echo "Using provided RC version: $input_rc_version"
          rc_version="$input_rc_version"
        else
          echo "Auto-detecting latest RC version..."
          # Get all RC tags, sort by version descending, take the first one
          rc_version=$(git tag -l | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+-RC\.[0-9]+$' | sort -V -r | head -1 | sed 's/^v//')
          
          if [ -z "$rc_version" ]; then
            echo "Error: No RC versions found in git tags"
            echo "Available tags:"
            git tag -l | head -10
            exit 1
          fi
          
          echo "Auto-detected latest RC version: $rc_version"
        fi
        
        echo "rc_version=$rc_version" >> $GITHUB_OUTPUT
        echo "Final RC version to promote: $rc_version"
        echo "::endgroup::"
      shell: bash

    - name: Print Action Arguments
      run: |
        echo "::group::Print RC promotion arguments"
        echo "project_name: ${{ inputs.project_name }}"
        echo "rc_version: ${{ steps.determine_rc.outputs.rc_version }}"
        echo "::endgroup::"
      shell: bash

    - name: Install Required pip packages
      run: |
        pip install coverage twine
      shell: bash    

    - name: Map PyPI API token to project
      id: map_token
      run: |
        case "${{ inputs.project_name }}" in
          provisioner)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_RUNTIME }}" >> $GITHUB_ENV
            echo "PYPI_API_TOKEN_SHARED=${{ inputs.PYPI_API_TOKEN_PROVISIONER_SHARED }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          *)
            echo "Unknown project_name: ${{ inputs.project_name }}"
            exit 1
            ;;
        esac
      shell: bash

    - name: Promote RC to Stable Version
      id: promote
      run: |
        echo "::group::Promoting RC to stable version and publishing to PyPI"
        
        # Pass tokens as comma-separated string for security
        pypi_tokens="${{ env.PYPI_API_TOKEN }},${{ env.PYPI_API_TOKEN_SHARED }}"
        
        python scripts/promote_rc_to_pypi.py \
          "${{ inputs.project_name }}" \
          "${{ steps.determine_rc.outputs.rc_version }}" \
          "$pypi_tokens"
        
        echo "::endgroup::" 
      shell: bash

    - name: Prepare git for commit
      run: |
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
      shell: bash

    - name: Open a GitHub PR with released version
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
        echo "::group::Opening a GitHub PR with released stable version"
        project_name="${{ inputs.project_name }}"
        stable_version="${{ steps.promote.outputs.stable_version }}"
        
        echo "Opening a GitHub PR for stable version ${stable_version}"

        # 
        # Open a GitHub PR with runtime & shared version bumps
        # 
        cd provisioner_shared
        git add resources/manifest.json
        git add pyproject.toml
        cd ..

        cd ${project_name}
        git add resources/manifest.json
        git add pyproject.toml
        cd ..

        branch_name=released-${project_name}-ver-${stable_version}
        git commit -m "Promote ${project_name} from RC to stable version ${stable_version}"
        git checkout -b ${branch_name}
        git push --set-upstream origin ${branch_name}
        gh pr create --title "[skip ci] Released ${project_name} stable version ${stable_version}" \
            --body "Promoted ${project_name} from RC to stable version ${stable_version}

This release was promoted from a Release Candidate via the General Availability workflow." \
            --base master --head ${branch_name} \
            --label "auto pr" \
            --label "stable release"
            
        echo "::endgroup::"
      shell: bash 