name: 'Publish Provisioner or Plugin to PyPi (auto version increment)'
description: 'Does the publishable is of type plugin?'

inputs:
  PYPI_API_TOKEN:
    type: string
    description: 'PyPi API token'
    required: true
  publishable:
    type: choice
    description: 'Select project to publish to PyPi'
    options: 
      - 'provisioner'
      - 'provisioner_examples_plugin'
      - 'provisioner_installers_plugin'
      - 'provisioner_single_board_plugin'
    required: true
  is_plugin:
    type: bool
    description: 'Does the publishable is of type plugin?'
    required: true

runs:
  using: 'composite'  
  env:
    PYPI_API_TOKEN: ${{ inputs.PYPI_API_TOKEN }}
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print publish action arguments"
        echo "publishable: ${{ inputs.publishable }}"
        echo "is_plugin: ${{ inputs.is_plugin }}"
        echo "::endgroup::"
      shell: bash

    - name: Install Required pip packages
      run: |
        pip install coverage twine
      shell: bash    

    - name: Publish to PyPi
      run: |
        echo "::group::Publishing to PyPi"
        publishable=${{ github.event.inputs.publishable }}
        if [ ${{ github.event.inputs.is_plugin }} == true ]; then
          cd plugins/${publishable}
        else
          cd ${publishable}
        fi
        poetry version patch
        ver=$(poetry version | awk '{print $2}' | tr -d '\n')
        echo -n $ver > ${publishable}/resources/version.txt
        make pip-publish-pypi
        if [ ${{ github.event.inputs.is_plugin }} == true ]; then
          cd ../..
        else
          cd ..
        fi
        echo "::endgroup::" 
      shell: bash

    - name: Prepare git for commit
      run: |
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
      shell: bash

    - name: Open a GitHub PR with released version
      run: |
        echo "::group::Opening a GitHub PR with released version"
        publishable=${{ github.event.inputs.publishable }}
        if [ ${{ github.event.inputs.is_plugin }} == true ]; then
          cd plugins/${publishable}
        else
          cd ${publishable}
        fi
        ver=$(poetry version | awk '{print $2}' | tr -d '\n')
        branch_name=released-${publishable}-ver-${ver}
        git add ${publishable}/resources/version.txt
        git add pyproject.toml
        git commit -m "Bump ${publishable} released version to ${ver}"
        git checkout -b ${branch_name}
        git push --set-upstream origin ${branch_name}
        gh pr create --title "Released ${publishable} version ${ver}" \
            --body "Bump ${publishable} released version to ${ver}" \
            --base master --head ${branch_name} \
            --label "auto pr"
        if [ ${{ github.event.inputs.is_plugin }} == true ]; then
          cd ../..
        else
          cd ..
        fi
        echo "::endgroup::"
      shell: bash
