name: 'Publish Provisioner or Plugin to PyPi (auto version increment)'
description: 'Auto increment takes place before publishing'

# 
# Upon publishign provisioner runtime, the provisioner_shared is also published
# under the same version. This is because the provisioner_shared is a dependency
# of the provisioner runtime and its plugins.
# 
inputs:
  PYPI_API_TOKEN:
    type: string
    description: 'PyPi API token'
    required: true
  project_to_publish:
    type: choice
    description: 'Select project to publish to PyPi'
    options: 
      - 'provisioner'
      - 'provisioner_examples_plugin'
      - 'provisioner_installers_plugin'
      - 'provisioner_single_board_plugin'
    required: true

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print publish action arguments"
        echo "project_to_publish: ${{ inputs.project_to_publish }}"
        echo "::endgroup::"
      shell: bash

    - name: Install Required pip packages
      run: |
        pip install coverage twine
      shell: bash    

    - name: Publish to PyPi
      run: |
        echo "::group::Publishing to PyPi"
        publishable=${{ inputs.project_to_publish }}

        # Is the publishable a plugin?
        if [ ${publishable} == "provisioner" ]; then
        
          publisher_script_path="../scripts/publish_to_pypi.sh"

          # 
          # Publish shared package
          # 
          cd provisioner_shared
          poetry version patch
          shared_ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $shared_ver > resources/version.txt
          {publisher_script_path} publish --build-type wheel --release-type pypi -y
          cd ..

          # 
          # Publish runtime package
          # 
          cd ${publishable}
          poetry version patch
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $ver > resources/version.txt

          # Update shared version in the runtime pyproject.toml
          ../scripts/update_shared_version.py --file_path pyproject.toml --package_name provisioner-shared --new_version "^${shared_ver}"
          
          {publisher_script_path} publish --build-type wheel --release-type pypi -y
          cd ..


        else

          publisher_script_path="../../scripts/publish_to_pypi.sh"

          # 
          # Publish plugin package
          # 
          cd plugins/${publishable}
          poetry version patch
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $ver > resources/version.txt
          {publisher_script_path} publish --build-type wheel --release-type pypi -y
          cd ../..
          
        fi

        echo "::endgroup::" 
      env:
        PYPI_API_TOKEN: ${{ inputs.PYPI_API_TOKEN }}
      shell: bash

    # Discard any potential changes to the git index which might
    # contain dependencies section in the pyproject.toml file
    # and other non version-bump from previous steps/actions
  
    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Prepare git for commit
      run: |
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
      shell: bash

    - name: Open a GitHub PR with released version
      run: |
        echo "::group::Opening a GitHub PR with released version"
        publishable=${{ inputs.publishable }}

        # Is the publishable a plugin?
        if [ ${publishable} == "provisioner" ]; then
        
          # 
          # Publish shared package
          # 
          cd provisioner_shared
          poetry version patch
          shared_ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $shared_ver > resources/version.txt

          git add resources/version.txt
          git add pyproject.toml
          cd ..

          # 
          # Publish runtime package
          # 
          cd ${publishable}
          poetry version patch
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $ver > resources/version.txt

          # Update shared version in the runtime pyproject.toml
          ../scripts/update_shared_version.py --file_path pyproject.toml --package_name provisioner-shared --new_version "^${shared_ver}"

          git add resources/version.txt
          git add pyproject.toml
          cd ..

        else

          # 
          # Publish plugin package
          # 
          cd plugins/${publishable}
          poetry version patch
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $ver > resources/version.txt

          git add resources/version.txt
          git add pyproject.toml
          cd ../..
          
        fi

        branch_name=released-${publishable}-ver-${ver}
        git commit -m "Bump ${publishable} released version to ${ver}"
        git checkout -b ${branch_name}
        git push --set-upstream origin ${branch_name}
        gh pr create --title "[skip ci] Released ${publishable} version ${ver}" \
            --body "Bump ${publishable} released version to ${ver}" \
            --base master --head ${branch_name} \
            --label "auto pr"
            
        echo "::endgroup::"
      shell: bash
