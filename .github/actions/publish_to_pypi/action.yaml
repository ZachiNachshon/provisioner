name: 'Publish Provisioner or Plugin to PyPi (auto version increment)'
description: 'Auto increment takes place before publishing'

# 
# Upon publishign provisioner runtime, the provisioner_shared is also published
# under the same version. This is because the provisioner_shared is a shared dependency
# of the provisioner runtime and its plugins.
# 
inputs:
  PYPI_API_TOKEN_PROVISIONER_RUNTIME:
    type: string
    description: 'PyPi provisioner runtime API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_SHARED:
    type: string
    description: 'PyPi provisioner shared API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN:
    type: string
    description: 'PyPi example plugin API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN:
    type: string
    description: 'PyPi installers plugin API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN:
    type: string
    description: 'PyPi single-board plugin API token'
    required: false
  PLUGINS_GITHUB_TOKEN:
    type: string
    description: 'GitHub plugins repository access token'
    required: false
  project_to_publish:
    type: choice
    description: 'Select project to publish to PyPi'
    options: 
      - 'provisioner'
      - 'provisioner_examples_plugin'
      - 'provisioner_installers_plugin'
      - 'provisioner_single_board_plugin'
    required: true

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print publish action arguments"
        echo "project_to_publish: ${{ inputs.project_to_publish }}"
        echo "::endgroup::"
      shell: bash

    - name: Install Required pip packages
      run: |
        pip install coverage twine
      shell: bash    

    # Discard any potential changes to the git index which might
    # contain dependencies section in the pyproject.toml file
    # and other non version-bump from previous steps/actions
    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Map PyPI API token to project
      id: map_token
      run: |
        case "${{ inputs.project_to_publish }}" in
          provisioner)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_RUNTIME }}" >> $GITHUB_ENV
            echo "PYPI_API_TOKEN_SHARED=${{ inputs.PYPI_API_TOKEN_PROVISIONER_SHARED }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          provisioner_examples_plugin)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.PLUGINS_GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          provisioner_installers_plugin)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.PLUGINS_GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          provisioner_single_board_plugin)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.PLUGINS_GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          *)
            echo "Unknown project_to_publish: ${{ inputs.project_to_publish }}"
            exit 1
            ;;
        esac
      shell: bash

    - name: Publish to PyPi
      run: |
        echo "::group::Publishing to PyPi"
        publishable=${{ inputs.project_to_publish }}

        # Is the publishable a plugin?
        if [ ${publishable} == "provisioner" ]; then

          echo "Publishing provisioner runtime & shared packages"
        
          publisher_script_path="../scripts/publish_to_pypi.sh"

          # 
          # Publish shared package
          # 
          cd provisioner_shared
          poetry version patch
          shared_ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $shared_ver > resources/version.txt

          PYPI_API_TOKEN=${PYPI_API_TOKEN_SHARED} \
            ${publisher_script_path} publish --build-type wheel --release-type pypi -y
          cd ..

          # 
          # Publish runtime package
          # 
          cd ${publishable}
          poetry version patch
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $ver > resources/version.txt

          # Update shared version in the runtime pyproject.toml
          ../scripts/update_shared_version.py --file_path pyproject.toml --package_name provisioner-shared --new_version "^${shared_ver}"
          
          PYPI_API_TOKEN=${PYPI_API_TOKEN} \
            ${publisher_script_path} publish --build-type wheel --release-type pypi -y
          cd ..

        else

          echo "Publishing ${publishable} plugin"

          publisher_script_path="../../scripts/publish_to_pypi.sh"

          # 
          # Publish plugin package
          # 
          cd plugins/${publishable}
          poetry version patch
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          echo -n $ver > resources/version.txt

          PYPI_API_TOKEN=${PYPI_API_TOKEN} \
            ${publisher_script_path} publish --build-type wheel --release-type pypi -y
          cd ../..
          
        fi

        echo "::endgroup::" 
      shell: bash

    - name: Prepare git for commit
      run: |
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
      shell: bash

    - name: Open a GitHub PR with released version
      run: |
        echo "::group::Opening a GitHub PR with released version"
        publishable=${{ inputs.project_to_publish }}

        # Is the publishable a plugin?
        if [ ${publishable} == "provisioner" ]; then

          echo "Opening a GitHub PR on runtime & shared version bump"

          # 
          # Open a GitHub PR with runtime & shared version bumps
          # 
          cd provisioner_shared
          git add resources/version.txt
          git add pyproject.toml
          cd ..

          # 
          # Publish runtime package
          # 
          cd ${publishable}
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          git add resources/version.txt
          git add pyproject.toml
          cd ..

          branch_name=released-${publishable}-ver-${ver}
          git commit -m "Bump ${publishable} released version to ${ver}"
          git checkout -b ${branch_name}
          git push --set-upstream origin ${branch_name}
          gh pr create --title "[skip ci] Released ${publishable} version ${ver}" \
              --body "Bump ${publishable} released version to ${ver}" \
              --base master --head ${branch_name} \
              --label "auto pr"

        else

          echo "Opening a GitHub PR on plugin version bump (separate repository !)"

          # 
          # Open a GitHub PR on the plugins repository with plugin version bump
          # 
          cd plugins/${publishable}
          ver=$(poetry version | awk '{print $2}' | tr -d '\n')
          git add resources/version.txt
          git add pyproject.toml

          # Fetch the latest changes from the remote repository
          git fetch origin

          branch_name=released-${publishable}-ver-${ver}
          git commit -m "Bump ${publishable} released version to ${ver}"
          git checkout -b ${branch_name}

          # Rebase your branch on top of the remote branch
          git rebase origin/${branch_name}

          git push --set-upstream origin ${branch_name}
          gh pr create --title "[skip ci] Released ${publishable} version ${ver}" \
              --body "Bump ${publishable} released version to ${ver}" \
              --base master --head ${branch_name} \
              --label "auto pr"

          cd ../..
          
        fi
            
        echo "::endgroup::"
      shell: bash
