name: 'Create a GitHub release version'
description: 'Does the publishable is of type plugin?'

inputs:
  GITHUB_TOKEN:
    type: string
    description: 'GitHub API token'
    required: true
  publishable:
    type: choice
    description: 'Select project to add as GitHub release'
    options: 
      - 'provisioner'
      - 'provisioner_examples_plugin'
      - 'provisioner_installers_plugin'
      - 'provisioner_single_board_plugin'
    required: true
  is_plugin:
    type: bool
    description: 'Does the publishable is of type plugin?'
    required: true

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print GitHub release arguments"
        echo "publishable: ${{ inputs.publishable }}"
        echo "is_plugin: ${{ inputs.is_plugin }}"
        echo "::endgroup::"
      shell: bash

    # Discard any potential changes to the git index which might
    # contain dependencies section in the pyproject.toml file
    # and other non version-bump from previous steps/actions
    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Create a GitHub release
      run: |
        echo "::group::Creating a GitHub release"
        publishable=${{ inputs.publishable }}
        if [ ${{ inputs.is_plugin }} == true ]; then
          cd plugins/${publishable}
        else
          cd ${publishable}
        fi
        make pip-publish-github

        if [ ${{ inputs.is_plugin }} == true ]; then
          cd ../..
        else
          cd ..
        fi
        echo "::endgroup::" 
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      shell: bash
