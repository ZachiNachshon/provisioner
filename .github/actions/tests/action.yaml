name: 'Tests Suite'
description: 'Run Tests Suite'
inputs:
  use_provisioner_from:
    description: 'Provisioner code to test with (source/pypi)'
    required: true
  modules_to_test:
    description: 'Comma delimited modules to test'
    required: true
    options: 
          - 'examples-plugin'
          - 'installers-plugin'
          - 'single-board-plugin'
          - 'all'
    default: 'all'
    type: string
runs:
  using: 'composite'
  steps:
    - name: Set provisioner developement dependencies on all other projects
      run: |
        pip install tomlkit
        pip install coverage
        make set-dev-deps-all
      shell: bash

    - name: Enable provisioner as a direct sources dependency in all modules (for testing)
      if: ${{ inputs.use_provisioner_from == 'source' }}
      run: make use-provisioner-from-sources
      shell: bash

    - name: Enable provisioner as a PyPi package in all modules (for testing)
      if: ${{ inputs.use_provisioner_from == 'pypi' }}
      run: make use-provisioner-from-pypi
      shell: bash

    - name: (Cache) Try Load - provisioner
      id: cached-venv-provisioner
      uses: actions/cache@v3
      with:
        path: ./provisioner/.venv
        key: provisioner-venv-${{ runner.os }}-${{ hashFiles('./provisioner/poetry.lock') }}-${{ hashFiles('./provisioner/pyproject.toml') }}

    - name: (Install) provisioner
      if: steps.cached-venv-provisioner.outputs.cache-hit != 'true'
      run: |
        cd provisioner
        poetry install --all-extras
        cd ..
      shell: bash
    
    - name: (Cache) Try Load - provisioner_features_lib
      id: cached-venv-provisioner-features-lib
      uses: actions/cache@v3
      with:
        path: ./provisioner_features_lib/.venv
        key: provisioner_features_lib-venv-${{ runner.os }}-${{ hashFiles('./provisioner_features_lib/poetry.lock') }}-${{ hashFiles('./provisioner_features_lib/pyproject.toml') }}

    - name: (Install) provisioner_features_lib
      if: steps.cached-venv-provisioner-features-lib.outputs.cache-hit != 'true'
      run: |
        cd provisioner_features_lib
        poetry install
        cd ..
      shell: bash

    - name: (Cache) Try Load - provisioner_examples_plugin
      if: >- 
        ${{ 
          contains(github.event.inputs.modules_to_test, 'examples-plugin') || 
          github.event.inputs.modules_to_test == 'all' 
        }}
      id: cached-venv-provisioner-examples-plugin
      uses: actions/cache@v3
      with:
        path: ./plugins/provisioner_examples_plugin/.venv
        key: provisioner_examples_plugin-venv-${{ runner.os }}-${{ hashFiles('./plugins/provisioner_examples_plugin/poetry.lock') }}-${{ hashFiles('./provisioner_examples_plugin/pyproject.toml') }}

    - name: (Install) provisioner_examples_plugin
      if: >- 
        ${{ 
          (contains(github.event.inputs.modules_to_test, 'examples-plugin') || 
          github.event.inputs.modules_to_test == 'all') && 
          steps.cached-venv-provisioner-examples-plugin.outputs.cache-hit != 'true' 
        }}
      run: |
        cd plugins/provisioner_examples_plugin
        poetry install
        cd ..
      shell: bash

    - name: (Cache) Try Load - provisioner_installers_plugin
      if: >- 
        ${{ 
          contains(github.event.inputs.modules_to_test, 'installers-plugin') || 
          github.event.inputs.modules_to_test == 'all' 
        }}
      id: cached-venv-provisioner-installers-plugin
      uses: actions/cache@v3
      with:
        path: ./plugins/provisioner_installers_plugin/.venv
        key: provisioner_installers_plugin-venv-${{ runner.os }}-${{ hashFiles('./plugins/provisioner_installers_plugin/poetry.lock') }}-${{ hashFiles('./provisioner_installers_plugin/pyproject.toml') }}

    - name: (Install) provisioner_installers_plugin
      if: >- 
        ${{ 
          (contains(github.event.inputs.modules_to_test, 'installers-plugin') || 
          github.event.inputs.modules_to_test == 'all') && 
          steps.cached-venv-provisioner-installers-plugin.outputs.cache-hit != 'true'
        }}
      run: |
        cd plugins/provisioner_installers_plugin
        poetry install
        cd ..
      shell: bash

    - name: (Cache) Try Load - provisioner_single_board_plugin
      if: >- 
        ${{ 
          contains(github.event.inputs.modules_to_test, 'single-board-plugin') || 
          github.event.inputs.modules_to_test == 'all' 
        }}
      id: cached-venv-provisioner-single-board-plugin
      uses: actions/cache@v3
      with:
        path: ./plugins/provisioner_single_board_plugin/.venv
        key: provisioner_single_board_plugin-venv-${{ runner.os }}-${{ hashFiles('./plugins/provisioner_single_board_plugin/poetry.lock') }}-${{ hashFiles('./provisioner_single_board_plugin/pyproject.toml') }}

    - name: (Install) provisioner_single_board_plugin
      if: >- 
        ${{ 
          (contains(github.event.inputs.modules_to_test, 'single-board-plugin') || 
          github.event.inputs.modules_to_test == 'all') && 
          steps.cached-venv-provisioner-single-board-plugin.outputs.cache-hit != 'true'
        }}
      run: |
        cd plugins/provisioner_single_board_plugin
        poetry install
        cd ..
      shell: bash

    - name: (Test) provisioner
      run: |
        cd provisioner
        make test-coverage-xml
        cd ..
      shell: bash    

    - name: (Test) provisioner_features_lib
      run: |
        cd provisioner_features_lib
        make test-coverage-xml
        cd ..
      shell: bash    

    - name: (Test) provisioner_examples_plugin
      if: >- 
        ${{ 
          contains(github.event.inputs.modules_to_test, 'examples-plugin') || 
          contains(github.event.inputs.modules_to_test, 'all')
        }}
      run: |
        cd plugins/provisioner_examples_plugin
        make test-coverage-xml
        cd ..
      shell: bash    
    
    - name: (Test) provisioner_installers_plugin
      if: >- 
        ${{ 
          contains(github.event.inputs.modules_to_test, 'installers-plugin') || 
          contains(github.event.inputs.modules_to_test, 'all')
        }}
      run: |
        cd plugins/provisioner_installers_plugin
        make test-coverage-xml
        cd ..
      shell: bash    

    - name: (Test) provisioner_single_board_plugin
      if: >- 
        ${{ 
          contains(github.event.inputs.modules_to_test, 'single-board-plugin') || 
          contains(github.event.inputs.modules_to_test, 'all')
        }}
      run: |
        cd plugins/provisioner_single_board_plugin
        make test-coverage-xml
        cd ..
      shell: bash    
