name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**' # Triggers the workflow on any pull request and on any branch

env:
  POETRY_VERSION: "2.1.3"

jobs:
  tests:
    name: Run Tests & Upload Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.11' ]

    steps:
      - name: Checkout repository code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true  # Fetch Git submodules
          token: ${{ secrets.PROVISIONER_PLUGINS_REPO_ACCESS_TOKEN }}

      - name: Setup Environment
        uses: ./.github/actions/setup
        env:
          PYTHON_VERSION: ${{ matrix.python }}
          POETRY_VERSION: ${{ env.POETRY_VERSION }}
      
      # Run unit tests first (faster, less resource intensive)
      - name: Run Unit Tests
        uses: ./.github/actions/tests
        with:
          include_e2e: false

      # Save unit test coverage
      - name: Save Unit Test Coverage
        run: |
          if [ -f coverage.xml ]; then
            mv coverage.xml coverage-unit.xml
          fi
        shell: bash

      # TODO: Uncomment this when we have a way to deploy the Docker images into a remote registry
      #       This will drastically reduce the time it takes to run the E2E tests
      # Run E2E tests with Docker caching
      # - name: Run E2E Tests  
      #   uses: ./.github/actions/tests
      #   with:
      #     include_e2e: true

      # Save E2E test coverage
      # - name: Save E2E Test Coverage
      #   run: |
      #     if [ -f coverage.xml ]; then
      #       mv coverage.xml coverage-e2e.xml
      #     fi
      #   shell: bash

      # Upload unit test coverage
      - name: Upload Unit Test Coverage
        if: github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' && hashFiles('coverage-unit.xml') != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-unit.xml
          flags: unit
          name: codecov-unit
          fail_ci_if_error: false

      # Upload E2E test coverage  
      # - name: Upload E2E Test Coverage
      #   if: github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' && hashFiles('coverage-e2e.xml') != ''
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage-e2e.xml
      #     flags: e2e
      #     name: codecov-e2e
      #     fail_ci_if_error: false

  release-candidate:
    name: Release Candidate
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    strategy:
      matrix:
        python: [ '3.11' ]

    steps:
      - name: Check for source code changes
        id: check-changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            source:
              - '**/*.py'
              - '**/*.yaml'
              - '**/*.yml'
              - '**/*.toml'
              - '**/*.json'
              - '**/*.sh'
              - 'Dockerfile*'
              - '**/Dockerfile*'
              - '!**/*.lock'
              - '!**/*.md'
              - '!**/README*'
              - '!**/CHANGELOG*'
              - '!**/LICENSE*'
              - '!**/.gitignore'
              - '!**/.cursorignore'
              
      - name: Checkout repository code (with submodules)
        if: steps.check-changes.outputs.source == 'true'
        uses: actions/checkout@v4
        with:
          submodules: true  # Fetch Git submodules
          token: ${{ secrets.PROVISIONER_PLUGINS_REPO_ACCESS_TOKEN }}

      - name: Setup Environment
        if: steps.check-changes.outputs.source == 'true'
        uses: ./.github/actions/setup
        env:
          PYTHON_VERSION: ${{ matrix.python }}
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Promote Release Candidate
        if: steps.check-changes.outputs.source == 'true'
        uses: ./.github/actions/promote-rc
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          projects: |
            [
              {
                "project_path": "provisioner",
                "is_plugin": false,
                "github_repo": "ZachiNachshon/provisioner"
              }
            ]
