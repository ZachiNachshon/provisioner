name: General Availability - Promote RC to PyPI

on:
  workflow_dispatch:
    inputs:
      rc_version:
        type: string
        description: 'Release Candidate version to promote (e.g., 1.2.3-RC.1). Leave empty to auto-select latest RC.'
        required: false
      project_name:
        type: choice
        description: 'Select project to promote to GA'
        options: 
          - 'provisioner'
        required: true

env:
  PYPI_API_TOKEN_PROVISIONER_RUNTIME: ${{ secrets.PROVISIONER_PYPI_API_TOKEN }}
  PYPI_API_TOKEN_PROVISIONER_SHARED: ${{ secrets.PYPI_API_TOKEN_PROVISIONER_SHARED }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POETRY_VERSION: "1.8.4"
  
jobs:
  promote_rc_to_ga:
    name: Promote RC to General Availability
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.11' ]

    steps:
      - name: Checkout repository code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true  # Fetch Git submodules
          token: ${{ secrets.PROVISIONER_PLUGINS_REPO_ACCESS_TOKEN }}

      - name: Setup Environment
        uses: ./.github/actions/setup
        env:
          PYTHON_VERSION: ${{ matrix.python }}
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Determine RC Version to Promote
        id: determine_rc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Determining RC version to promote"
          
          rc_version="${{ github.event.inputs.rc_version }}"
          python3 scripts/github_actions/version_manager.py promote "$rc_version"
          
          echo "::endgroup::"

      - name: Prepare GA Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Preparing GA release notes"
          
          rc_version="${{ steps.determine_rc.outputs.rc_version }}"
          stable_version="${{ steps.determine_rc.outputs.stable_version }}"
          
          python3 scripts/github_actions/release_notes_manager.py prepare \
            "$rc_version" \
            "$stable_version" \
            "ga_release_notes.md"
          
          echo "::endgroup::"

      - name: Create Stable GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          rc_version="${{ steps.determine_rc.outputs.rc_version }}"
          stable_version="${{ steps.determine_rc.outputs.stable_version }}"
          project_name="${{ github.event.inputs.project_name }}"
          
          echo "::group::Creating stable GitHub release"
          echo "Promoting RC v${rc_version} to stable release v${stable_version}"
          
          # Use the enhanced publish script to promote RC to GA
          scripts/github_actions/package_deployer.sh upload \
            --upload-action promote-rc \
            --source-tag "v${rc_version}" \
            --release-tag "v${stable_version}" \
            --release-title "Release v${stable_version}" \
            --release-notes-file "ga_release_notes.md" \
            -y
          
          # Mark the new release as latest
          gh release edit "v${stable_version}" --latest
          
          echo "Successfully created stable release v${stable_version}"
          echo "::endgroup::"

      - name: Upload Stable Release to PyPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          stable_version="${{ steps.determine_rc.outputs.stable_version }}"
          project_name="${{ github.event.inputs.project_name }}"
          
          echo "::group::Uploading stable release to PyPI (both runtime and shared)"
          echo "Uploading v${stable_version} to PyPI - separate uploads for runtime and shared"
          
          # Upload provisioner_runtime to PyPI
          echo "Uploading provisioner_runtime to PyPI..."
          export PYPI_API_TOKEN="${{ env.PYPI_API_TOKEN_PROVISIONER_RUNTIME }}"
          scripts/github_actions/package_deployer.sh upload \
            --upload-action upload-to-pypi \
            --source-tag "v${stable_version}" \
            --project-path "provisioner" \
            -y
          
          echo "Successfully uploaded provisioner_runtime v${stable_version} to PyPI"
          
          # Upload provisioner_shared to PyPI
          echo "Uploading provisioner_shared to PyPI..."
          export PYPI_API_TOKEN="${{ env.PYPI_API_TOKEN_PROVISIONER_SHARED }}"
          scripts/github_actions/package_deployer.sh upload \
            --upload-action upload-to-pypi \
            --source-tag "v${stable_version}" \
            --project-path "provisioner_shared" \
            -y
          
          echo "Successfully uploaded provisioner_shared v${stable_version} to PyPI"
          
          echo "Successfully uploaded both packages to PyPI: v${stable_version}"
          echo "::endgroup::"

      - name: Update Project Versions for Next Development Cycle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Updating project versions for next development cycle"
          project_name="${{ github.event.inputs.project_name }}"
          stable_version="${{ steps.determine_rc.outputs.stable_version }}"
          
          # Use the Python script to handle version bumping
          python3 scripts/github_actions/post_release_version_bump.py \
            --project-name "${project_name}" \
            --stable-version "${stable_version}"
          
          echo "::endgroup::" 