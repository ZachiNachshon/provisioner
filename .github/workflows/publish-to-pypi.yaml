name: Publish Provisioner to PyPi (auto version increment)

# 
# Upon publishign provisioner runtime, the provisioner_shared is also published
# under the same version. This is because the provisioner_shared is a dependency
# of the provisioner runtime and its plugins.
# We must have it installed separately since if it'll be linked to runtime or plugins
# upon uninstall, it'll get removed
# 
on:
  workflow_dispatch:
    inputs:
      publishable_project:
        type: choice
        description: 'Select a PyPi publishable'
        options: 
          - 'provisioner'
        required: true

env:
  PYPI_API_TOKEN_PROVISIONER_RUNTIME: ${{ secrets.PROVISIONER_PYPI_API_TOKEN }}
  PYPI_API_TOKEN_PROVISIONER_SHARED: ${{ secrets.PYPI_API_TOKEN_PROVISIONER_SHARED }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POETRY_VERSION: "1.8.4"
  
jobs:
  publish_poetry_package:
    name: Publish provisioner to PyPi
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.11' ]

    steps:
      - name: Checkout repository code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true  # Fetch Git submodules
          token: ${{ secrets.PROVISIONER_PLUGINS_REPO_ACCESS_TOKEN }}

      - name: Setup Environment
        uses: ./.github/actions/setup
        env:
          PYTHON_VERSION: ${{ matrix.python }}
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Run Tests
        uses: ./.github/actions/tests

      - name: Publish to PyPi & GitHub
        uses: ./.github/actions/publish_poetry_package
        with:
          project_to_publish: ${{ github.event.inputs.publishable_project }}
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          # PyPi access tokens
          PYPI_API_TOKEN_PROVISIONER_RUNTIME: ${{ env.PYPI_API_TOKEN_PROVISIONER_RUNTIME }}
          PYPI_API_TOKEN_PROVISIONER_SHARED: ${{ env.PYPI_API_TOKEN_PROVISIONER_SHARED }}
