name: Update Plugins SHA

# 
# IMPORTANT: 
# This workflow is triggered manually by the user.
# GitHub does not allow triggering a workflow within a workflow which means
# that the newly created PR won't run the CI workflow.
# As suggested, I've implemented the CI workflow in here as well
# (see https://github.com/cli/cli/discussions/6575)
# 

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA of repository Provisioner-Plugins'
        required: true
        default: 'a1b2c3d4...'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA: ${{ github.event.inputs.commit_sha }}
  
jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.10' ]

    steps:
      - name: Checkout repository code (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: true  # Fetch Git submodules
          token: ${{ secrets.PROVISIONER_PLUGINS_REPO_ACCESS_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: (Cache) Try Load - Poetry Installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local                         # Path depends on the OS
          key: poetry-${{ env.POETRY_VERSION }}  # Change to reset cache

      - name: (Install) Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: (Cache) Try Load - gh
        id: cache-gh
        uses: actions/cache@v2
        with:
          path: /usr/local/bin/gh
          key: provisioner-venv-${{ runner.os }}

      - name: (Install) gh
        if: steps.cache-gh.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.41.0/gh_2.41.0_linux_amd64.tar.gz | tar xz
          sudo mv gh_*_linux_amd64/bin/gh /usr/local/bin/
          gh --version

      - name: Enable provisioner as a direct dependency in all modules (for testing)
        run: make enable-provisioner-dependency

      - name: (Cache) Try Load - provisioner
        id: cached-venv-provisioner
        uses: actions/cache@v3
        with:
          path: ./provisioner/.venv
          key: provisioner-venv-${{ runner.os }}-${{ hashFiles('./provisioner/poetry.lock') }}-${{ hashFiles('./provisioner/pyproject.toml') }}

      - name: (Install) provisioner
        if: steps.cached-venv-provisioner.outputs.cache-hit != 'true'
        run: |
          cd provisioner
          poetry install --all-extras
          cd ..
      
      - name: (Cache) Try Load - provisioner_features_lib
        id: cached-venv-provisioner-features-lib
        uses: actions/cache@v3
        with:
          path: ./provisioner_features_lib/.venv
          key: provisioner_features_lib-venv-${{ runner.os }}-${{ hashFiles('./provisioner_features_lib/poetry.lock') }}-${{ hashFiles('./provisioner_features_lib/pyproject.toml') }}

      - name: (Install) provisioner_features_lib
        if: steps.cached-venv-provisioner-features-lib.outputs.cache-hit != 'true'
        run: |
          cd provisioner_features_lib
          poetry install
          cd ..

      - name: (Cache) Try Load - provisioner_examples_plugin
        id: cached-venv-provisioner-examples-plugin
        uses: actions/cache@v3
        with:
          path: ./plugins/provisioner_examples_plugin/.venv
          key: provisioner_examples_plugin-venv-${{ runner.os }}-${{ hashFiles('./plugins/provisioner_examples_plugin/poetry.lock') }}-${{ hashFiles('./provisioner_examples_plugin/pyproject.toml') }}

      - name: (Install) provisioner_examples_plugin
        if: steps.cached-venv-provisioner-examples-plugin.outputs.cache-hit != 'true'
        run: |
          cd plugins/provisioner_examples_plugin
          poetry install
          cd ..

      - name: (Cache) Try Load - provisioner_installers_plugin
        id: cached-venv-provisioner-installers-plugin
        uses: actions/cache@v3
        with:
          path: ./plugins/provisioner_installers_plugin/.venv
          key: provisioner_installers_plugin-venv-${{ runner.os }}-${{ hashFiles('./plugins/provisioner_installers_plugin/poetry.lock') }}-${{ hashFiles('./provisioner_installers_plugin/pyproject.toml') }}

      - name: (Install) provisioner_installers_plugin
        if: steps.cached-venv-provisioner-installers-plugin.outputs.cache-hit != 'true'
        run: |
          cd plugins/provisioner_installers_plugin
          poetry install
          cd ..
      
      - name: (Cache) Try Load - provisioner_single_board_plugin
        id: cached-venv-provisioner-single-board-plugin
        uses: actions/cache@v3
        with:
          path: ./plugins/provisioner_single_board_plugin/.venv
          key: provisioner_single_board_plugin-venv-${{ runner.os }}-${{ hashFiles('./plugins/provisioner_single_board_plugin/poetry.lock') }}-${{ hashFiles('./provisioner_single_board_plugin/pyproject.toml') }}

      - name: (Install) provisioner_single_board_plugin
        if: steps.cached-venv-provisioner-single-board-plugin.outputs.cache-hit != 'true'
        run: |
          cd plugins/provisioner_single_board_plugin
          poetry install
          cd ..

      - name: Update Provisioner Plugins SHA
        run: |
          cd plugins
          git fetch
          git checkout ${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA}
          cd ..

      - name: Run tests suite
        run: |
          make test-coverage-xml-all

      # After we made sure that Provisioner-Plugins commit hash does not break Provisioner repository, we can create the PR
      - name: Commit Taps Plugins SHA
        run: |
          git config --global user.email "zachi.nachshon@gmail.com"
          git config --global user.name "ZachiNachshon"
          git checkout -b update-plugins-${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA}
          git add plugins
          git commit -m "Update Tapas Plugins to ${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA}"
          git push --set-upstream origin update-plugins-${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA}
          gh pr create --title "Update Tapas Plugins to ${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA}" --body "Update Provisioner Plugins to ${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA}" --base master --head update-plugins-${GH_ACTION_PROVISIONER_PLUGINS_COMMIT_SHA} --label "auto pr"