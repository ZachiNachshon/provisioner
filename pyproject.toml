[tool.poetry]
name = "provisioner_monorepo"
version = "0.0.1"
description = "Provision Everything Anywhere"
authors = ["Zachi Nachshon <zachi.nachshon@gmail.com>"]

# The root package is meant only for dependency management for a developing environment
# but not for packaging and distribution
package-mode = false

# Until multi-project is supported natively with Poetry, use a plugins that bundles
# declared dependencies within the parent project. In this case we'll have to exclude
# Poetry package related files from being part of the tar.gz
# https://github.com/DavidVujic/poetry-multiproject-plugin
exclude = [
    "**/.venv",
    "**/*_test*", 
    # We cannot exclude fakes from the provisioner pip package, the plugins CI rely on
    # testing with the latest provisioner package
    # "**/*_fake*", 
    "**/dist*", 
    "**/htmlcov", 
    "**/poetry.lock", 
    "**/pytest", 
    "**/Makefile", 
    "**/runners", 
    "**/.gitignore",
    "**/.coverage",
    "**/.coveragerc",
    "**/.git-deps",
    "**/.pytest_cache"]

packages = [
    { include = "provisioner" },
    { include = "plugins" }
]

[tool.poetry.scripts]
provisioner = "provisioner.main:main"

[tool.poetry.dependencies]
python = "^3.11"
# Always use latest versions for runtime/shared and plugins during development/testing/CI
provisioner_runtime = ">=0.0.1"
provisioner_shared = ">=0.0.1"
provisioner_installers_plugin = ">=0.0.1"
provisioner_examples_plugin = ">=0.0.1"
provisioner_single_board_plugin = ">=0.0.1"

# 
# Can be used only when running Unit/IT tests locally using 'poetry run coverage run -m pytest -s <path>'
# 
# provisioner_runtime = {path = "/Users/zachin/codebase/github/provisioner/provisioner", develop = true}
# provisioner_shared = {path = "/Users/zachin/codebase/github/provisioner/provisioner_shared", develop = true}
# provisioner_installers_plugin = {path = "/Users/zachin/codebase/github/provisioner/plugins/provisioner_installers_plugin", develop = true}
# provisioner_examples_plugin = {path = "/Users/zachin/codebase/github/provisioner/plugins/provisioner_examples_plugin", develop = true}
# provisioner_single_board_plugin = {path = "/Users/zachin/codebase/github/provisioner/plugins/provisioner_single_board_plugin", develop = true}

[tool.poetry.group.dev.dependencies]
black = "^25.9.0"
pytest = "^8.4.2"
mypy = "^1.18"
coverage = "^7.11.0"
diagrams = "^0.24.1"
ruff = "^0.14.2"
docker = "^7.1.0"
testcontainers = "^4.13.2"
paramiko = "^3.5.1"
tomlkit = "^0.13.2"

[build-system]
requires = ["poetry-core>=1.4.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.mypy]
exclude = ["external"]
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false # Generates an error if a component of a type becomes Any because mypy couldnâ€™t resolve an import
warn_return_any = false # Generates an error if you return a value with an Any type in a function that is annotated to return a non-Any value
warn_unused_ignores = true
no_implicit_optional = true
show_error_codes = true

[tool.ruff]
exclude = [".venv", "external", ".git-deps"]
line-length = 120
lint.ignore = [ "E501", "E402", "F403", "F405" ]
lint.select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    # isort
    "I",
    # Whitespaces
    "W", 
]